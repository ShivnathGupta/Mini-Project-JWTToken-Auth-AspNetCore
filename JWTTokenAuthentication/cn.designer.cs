#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace cn
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class Monika : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssignSubject(AssignSubject instance);
    partial void UpdateAssignSubject(AssignSubject instance);
    partial void DeleteAssignSubject(AssignSubject instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertRegistration(Registration instance);
    partial void UpdateRegistration(Registration instance);
    partial void DeleteRegistration(Registration instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertStudentRemarks(StudentRemarks instance);
    partial void UpdateStudentRemarks(StudentRemarks instance);
    partial void DeleteStudentRemarks(StudentRemarks instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertTest(Test instance);
    partial void UpdateTest(Test instance);
    partial void DeleteTest(Test instance);
    #endregion
		
		public Monika(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Monika(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Monika(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Monika(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AssignSubject> AssignSubject
		{
			get
			{
				return this.GetTable<AssignSubject>();
			}
		}
		
		public System.Data.Linq.Table<Course> Course
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Question> Question
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Registration> Registration
		{
			get
			{
				return this.GetTable<Registration>();
			}
		}
		
		public System.Data.Linq.Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<StudentRemarks> StudentRemarks
		{
			get
			{
				return this.GetTable<StudentRemarks>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subject
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Test> Test
		{
			get
			{
				return this.GetTable<Test>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssignSubject")]
	public partial class AssignSubject : b, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Assignid;
		
		private System.Nullable<int> _Regidref;
		
		private System.Nullable<int> _Subjectidref;
		
		private EntityRef<Registration> _Registration;
		
		private EntityRef<Subject> _Subject;
		
		private EntitySet<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssignidChanging(int value);
    partial void OnAssignidChanged();
    partial void OnRegidrefChanging(System.Nullable<int> value);
    partial void OnRegidrefChanged();
    partial void OnSubjectidrefChanging(System.Nullable<int> value);
    partial void OnSubjectidrefChanged();
    #endregion
		
		public AssignSubject()
		{
			this._Registration = default(EntityRef<Registration>);
			this._Subject = default(EntityRef<Subject>);
			this._Test = new EntitySet<Test>(new Action<Test>(this.attach_Test), new Action<Test>(this.detach_Test));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="assignid", Storage="_Assignid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Assignid
		{
			get
			{
				return this._Assignid;
			}
			set
			{
				if ((this._Assignid != value))
				{
					this.OnAssignidChanging(value);
					this.SendPropertyChanging();
					this._Assignid = value;
					this.SendPropertyChanged("Assignid");
					this.OnAssignidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="regidref", Storage="_Regidref", DbType="Int")]
		public System.Nullable<int> Regidref
		{
			get
			{
				return this._Regidref;
			}
			set
			{
				if ((this._Regidref != value))
				{
					this.OnRegidrefChanging(value);
					this.SendPropertyChanging();
					this._Regidref = value;
					this.SendPropertyChanged("Regidref");
					this.OnRegidrefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="subjectidref", Storage="_Subjectidref", DbType="Int")]
		public System.Nullable<int> Subjectidref
		{
			get
			{
				return this._Subjectidref;
			}
			set
			{
				if ((this._Subjectidref != value))
				{
					this.OnSubjectidrefChanging(value);
					this.SendPropertyChanging();
					this._Subjectidref = value;
					this.SendPropertyChanged("Subjectidref");
					this.OnSubjectidrefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__AssignSub__regid__31EC6D26", Storage="_Registration", ThisKey="Regidref", OtherKey="Regid", IsForeignKey=true)]
		public Registration Registration
		{
			get
			{
				return this._Registration.Entity;
			}
			set
			{
				Registration previousValue = this._Registration.Entity;
				if (((previousValue != value) 
							|| (this._Registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registration.Entity = null;
						previousValue.AssignSubject.Remove(this);
					}
					this._Registration.Entity = value;
					if ((value != null))
					{
						value.AssignSubject.Add(this);
						this._Regidref = value.Regid;
					}
					else
					{
						this._Regidref = default(Nullable<int>);
					}
					this.SendPropertyChanged("Registration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__AssignSub__subje__1B0907CE", Storage="_Subject", ThisKey="Subjectidref", OtherKey="Subjectid", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.AssignSubject.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.AssignSubject.Add(this);
						this._Subjectidref = value.Subjectid;
					}
					else
					{
						this._Subjectidref = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__Test__assignidre__1DE57479", Storage="_Test", ThisKey="Assignid", OtherKey="Assignidref", DeleteRule="NO ACTION")]
		public EntitySet<Test> Test
		{
			get
			{
				return this._Test;
			}
			set
			{
				this._Test.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Test(Test entity)
		{
			this.SendPropertyChanging();
			entity.AssignSubject = this;
		}
		
		private void detach_Test(Test entity)
		{
			this.SendPropertyChanging();
			entity.AssignSubject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : b, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Courseid;
		
		private string _Coursename;
		
		private System.Nullable<int> _IsActive;
		
		private EntitySet<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseidChanging(int value);
    partial void OnCourseidChanged();
    partial void OnCoursenameChanging(string value);
    partial void OnCoursenameChanged();
    partial void OnIsActiveChanging(System.Nullable<int> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Course()
		{
			this._Subject = new EntitySet<Subject>(new Action<Subject>(this.attach_Subject), new Action<Subject>(this.detach_Subject));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="courseid", Storage="_Courseid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Courseid
		{
			get
			{
				return this._Courseid;
			}
			set
			{
				if ((this._Courseid != value))
				{
					this.OnCourseidChanging(value);
					this.SendPropertyChanging();
					this._Courseid = value;
					this.SendPropertyChanged("Courseid");
					this.OnCourseidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="coursename", Storage="_Coursename", DbType="VarChar(50)")]
		public string Coursename
		{
			get
			{
				return this._Coursename;
			}
			set
			{
				if ((this._Coursename != value))
				{
					this.OnCoursenameChanging(value);
					this.SendPropertyChanging();
					this._Coursename = value;
					this.SendPropertyChanged("Coursename");
					this.OnCoursenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="isActive", Storage="_IsActive", DbType="Int")]
		public System.Nullable<int> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__Subject__coursei__173876EA", Storage="_Subject", ThisKey="Courseid", OtherKey="Courseidref", DeleteRule="NO ACTION")]
		public EntitySet<Subject> Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				this._Subject.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subject(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Subject(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
	public partial class Question : b, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Questionid;
		
		private string _Question1;
		
		private string _Option1;
		
		private string _Option2;
		
		private string _Option3;
		
		private string _Option4;
		
		private string _Answer;
		
		private System.Nullable<int> _Testidref;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionidChanging(int value);
    partial void OnQuestionidChanged();
    partial void OnQuestion1Changing(string value);
    partial void OnQuestion1Changed();
    partial void OnOption1Changing(string value);
    partial void OnOption1Changed();
    partial void OnOption2Changing(string value);
    partial void OnOption2Changed();
    partial void OnOption3Changing(string value);
    partial void OnOption3Changed();
    partial void OnOption4Changing(string value);
    partial void OnOption4Changed();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnTestidrefChanging(System.Nullable<int> value);
    partial void OnTestidrefChanged();
    #endregion
		
		public Question()
		{
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="questionid", Storage="_Questionid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Questionid
		{
			get
			{
				return this._Questionid;
			}
			set
			{
				if ((this._Questionid != value))
				{
					this.OnQuestionidChanging(value);
					this.SendPropertyChanging();
					this._Questionid = value;
					this.SendPropertyChanged("Questionid");
					this.OnQuestionidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="question", Storage="_Question1", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Question1
		{
			get
			{
				return this._Question1;
			}
			set
			{
				if ((this._Question1 != value))
				{
					this.OnQuestion1Changing(value);
					this.SendPropertyChanging();
					this._Question1 = value;
					this.SendPropertyChanged("Question1");
					this.OnQuestion1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="option1", Storage="_Option1", DbType="VarChar(50)")]
		public string Option1
		{
			get
			{
				return this._Option1;
			}
			set
			{
				if ((this._Option1 != value))
				{
					this.OnOption1Changing(value);
					this.SendPropertyChanging();
					this._Option1 = value;
					this.SendPropertyChanged("Option1");
					this.OnOption1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="option2", Storage="_Option2", DbType="VarChar(50)")]
		public string Option2
		{
			get
			{
				return this._Option2;
			}
			set
			{
				if ((this._Option2 != value))
				{
					this.OnOption2Changing(value);
					this.SendPropertyChanging();
					this._Option2 = value;
					this.SendPropertyChanged("Option2");
					this.OnOption2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="option3", Storage="_Option3", DbType="VarChar(50)")]
		public string Option3
		{
			get
			{
				return this._Option3;
			}
			set
			{
				if ((this._Option3 != value))
				{
					this.OnOption3Changing(value);
					this.SendPropertyChanging();
					this._Option3 = value;
					this.SendPropertyChanged("Option3");
					this.OnOption3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="option4", Storage="_Option4", DbType="VarChar(50)")]
		public string Option4
		{
			get
			{
				return this._Option4;
			}
			set
			{
				if ((this._Option4 != value))
				{
					this.OnOption4Changing(value);
					this.SendPropertyChanging();
					this._Option4 = value;
					this.SendPropertyChanged("Option4");
					this.OnOption4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="answer", Storage="_Answer", DbType="VarChar(50)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="testidref", Storage="_Testidref", DbType="Int")]
		public System.Nullable<int> Testidref
		{
			get
			{
				return this._Testidref;
			}
			set
			{
				if ((this._Testidref != value))
				{
					this.OnTestidrefChanging(value);
					this.SendPropertyChanging();
					this._Testidref = value;
					this.SendPropertyChanged("Testidref");
					this.OnTestidrefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__Question__testid__20C1E124", Storage="_Test", ThisKey="Testidref", OtherKey="Testid", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.Question.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.Question.Add(this);
						this._Testidref = value.Testid;
					}
					else
					{
						this._Testidref = default(Nullable<int>);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registration")]
	public partial class Registration : b, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Regid;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _Email;
		
		private string _Password;
		
		private System.Nullable<int> _Roleid;
		
		private System.Nullable<int> _IsActive;
		
		private EntitySet<AssignSubject> _AssignSubject;
		
		private EntityRef<Role> _Role;
		
		private EntitySet<StudentRemarks> _StudentRemarks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegidChanging(int value);
    partial void OnRegidChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleidChanging(System.Nullable<int> value);
    partial void OnRoleidChanged();
    partial void OnIsActiveChanging(System.Nullable<int> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Registration()
		{
			this._AssignSubject = new EntitySet<AssignSubject>(new Action<AssignSubject>(this.attach_AssignSubject), new Action<AssignSubject>(this.detach_AssignSubject));
			this._Role = default(EntityRef<Role>);
			this._StudentRemarks = new EntitySet<StudentRemarks>(new Action<StudentRemarks>(this.attach_StudentRemarks), new Action<StudentRemarks>(this.detach_StudentRemarks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="regid", Storage="_Regid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Regid
		{
			get
			{
				return this._Regid;
			}
			set
			{
				if ((this._Regid != value))
				{
					this.OnRegidChanging(value);
					this.SendPropertyChanging();
					this._Regid = value;
					this.SendPropertyChanged("Regid");
					this.OnRegidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="firstname", Storage="_Firstname", DbType="VarChar(50)")]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="lastname", Storage="_Lastname", DbType="VarChar(50)")]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="email", Storage="_Email", DbType="VarChar(254)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="password", Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="roleid", Storage="_Roleid", DbType="Int")]
		public System.Nullable<int> Roleid
		{
			get
			{
				return this._Roleid;
			}
			set
			{
				if ((this._Roleid != value))
				{
					this.OnRoleidChanging(value);
					this.SendPropertyChanging();
					this._Roleid = value;
					this.SendPropertyChanged("Roleid");
					this.OnRoleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="isActive", Storage="_IsActive", DbType="Int")]
		public System.Nullable<int> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__AssignSub__regid__31EC6D26", Storage="_AssignSubject", ThisKey="Regid", OtherKey="Regidref", DeleteRule="NO ACTION")]
		public EntitySet<AssignSubject> AssignSubject
		{
			get
			{
				return this._AssignSubject;
			}
			set
			{
				this._AssignSubject.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__Registrat__rolei__30F848ED", Storage="_Role", ThisKey="Roleid", OtherKey="Roleid", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Registration.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Registration.Add(this);
						this._Roleid = value.Roleid;
					}
					else
					{
						this._Roleid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__StudentRe__regid__32E0915F", Storage="_StudentRemarks", ThisKey="Regid", OtherKey="Regidref", DeleteRule="NO ACTION")]
		public EntitySet<StudentRemarks> StudentRemarks
		{
			get
			{
				return this._StudentRemarks;
			}
			set
			{
				this._StudentRemarks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssignSubject(AssignSubject entity)
		{
			this.SendPropertyChanging();
			entity.Registration = this;
		}
		
		private void detach_AssignSubject(AssignSubject entity)
		{
			this.SendPropertyChanging();
			entity.Registration = null;
		}
		
		private void attach_StudentRemarks(StudentRemarks entity)
		{
			this.SendPropertyChanging();
			entity.Registration = this;
		}
		
		private void detach_StudentRemarks(StudentRemarks entity)
		{
			this.SendPropertyChanging();
			entity.Registration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : b, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Roleid;
		
		private string _Rolename;
		
		private EntitySet<Registration> _Registration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleidChanging(int value);
    partial void OnRoleidChanged();
    partial void OnRolenameChanging(string value);
    partial void OnRolenameChanged();
    #endregion
		
		public Role()
		{
			this._Registration = new EntitySet<Registration>(new Action<Registration>(this.attach_Registration), new Action<Registration>(this.detach_Registration));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="roleid", Storage="_Roleid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Roleid
		{
			get
			{
				return this._Roleid;
			}
			set
			{
				if ((this._Roleid != value))
				{
					this.OnRoleidChanging(value);
					this.SendPropertyChanging();
					this._Roleid = value;
					this.SendPropertyChanged("Roleid");
					this.OnRoleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="rolename", Storage="_Rolename", DbType="VarChar(50)")]
		public string Rolename
		{
			get
			{
				return this._Rolename;
			}
			set
			{
				if ((this._Rolename != value))
				{
					this.OnRolenameChanging(value);
					this.SendPropertyChanging();
					this._Rolename = value;
					this.SendPropertyChanged("Rolename");
					this.OnRolenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__Registrat__rolei__30F848ED", Storage="_Registration", ThisKey="Roleid", OtherKey="Roleid", DeleteRule="NO ACTION")]
		public EntitySet<Registration> Registration
		{
			get
			{
				return this._Registration;
			}
			set
			{
				this._Registration.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registration(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Registration(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentRemarks")]
	public partial class StudentRemarks : b, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Studentremarkid;
		
		private System.Nullable<int> _Regidref;
		
		private System.Nullable<int> _Total;
		
		private System.Nullable<int> _Obtained;
		
		private System.Nullable<int> _Testidref;
		
		private System.Nullable<int> _Subjectidref;
		
		private EntityRef<Registration> _Registration;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentremarkidChanging(int value);
    partial void OnStudentremarkidChanged();
    partial void OnRegidrefChanging(System.Nullable<int> value);
    partial void OnRegidrefChanged();
    partial void OnTotalChanging(System.Nullable<int> value);
    partial void OnTotalChanged();
    partial void OnObtainedChanging(System.Nullable<int> value);
    partial void OnObtainedChanged();
    partial void OnTestidrefChanging(System.Nullable<int> value);
    partial void OnTestidrefChanged();
    partial void OnSubjectidrefChanging(System.Nullable<int> value);
    partial void OnSubjectidrefChanged();
    #endregion
		
		public StudentRemarks()
		{
			this._Registration = default(EntityRef<Registration>);
			this._Subject = default(EntityRef<Subject>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="studentremarkid", Storage="_Studentremarkid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Studentremarkid
		{
			get
			{
				return this._Studentremarkid;
			}
			set
			{
				if ((this._Studentremarkid != value))
				{
					this.OnStudentremarkidChanging(value);
					this.SendPropertyChanging();
					this._Studentremarkid = value;
					this.SendPropertyChanged("Studentremarkid");
					this.OnStudentremarkidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="regidref", Storage="_Regidref", DbType="Int")]
		public System.Nullable<int> Regidref
		{
			get
			{
				return this._Regidref;
			}
			set
			{
				if ((this._Regidref != value))
				{
					this.OnRegidrefChanging(value);
					this.SendPropertyChanging();
					this._Regidref = value;
					this.SendPropertyChanged("Regidref");
					this.OnRegidrefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="total", Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="obtained", Storage="_Obtained", DbType="Int")]
		public System.Nullable<int> Obtained
		{
			get
			{
				return this._Obtained;
			}
			set
			{
				if ((this._Obtained != value))
				{
					this.OnObtainedChanging(value);
					this.SendPropertyChanging();
					this._Obtained = value;
					this.SendPropertyChanged("Obtained");
					this.OnObtainedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="testidref", Storage="_Testidref", DbType="Int")]
		public System.Nullable<int> Testidref
		{
			get
			{
				return this._Testidref;
			}
			set
			{
				if ((this._Testidref != value))
				{
					this.OnTestidrefChanging(value);
					this.SendPropertyChanging();
					this._Testidref = value;
					this.SendPropertyChanged("Testidref");
					this.OnTestidrefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="subjectidref", Storage="_Subjectidref", DbType="Int")]
		public System.Nullable<int> Subjectidref
		{
			get
			{
				return this._Subjectidref;
			}
			set
			{
				if ((this._Subjectidref != value))
				{
					this.OnSubjectidrefChanging(value);
					this.SendPropertyChanging();
					this._Subjectidref = value;
					this.SendPropertyChanged("Subjectidref");
					this.OnSubjectidrefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__StudentRe__regid__32E0915F", Storage="_Registration", ThisKey="Regidref", OtherKey="Regid", IsForeignKey=true)]
		public Registration Registration
		{
			get
			{
				return this._Registration.Entity;
			}
			set
			{
				Registration previousValue = this._Registration.Entity;
				if (((previousValue != value) 
							|| (this._Registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registration.Entity = null;
						previousValue.StudentRemarks.Remove(this);
					}
					this._Registration.Entity = value;
					if ((value != null))
					{
						value.StudentRemarks.Add(this);
						this._Regidref = value.Regid;
					}
					else
					{
						this._Regidref = default(Nullable<int>);
					}
					this.SendPropertyChanged("Registration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__StudentRe__subje__2E1BDC42", Storage="_Subject", ThisKey="Subjectidref", OtherKey="Subjectid", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.StudentRemarks.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.StudentRemarks.Add(this);
						this._Subjectidref = value.Subjectid;
					}
					else
					{
						this._Subjectidref = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__StudentRe__testi__2D27B809", Storage="_Test", ThisKey="Testidref", OtherKey="Testid", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.StudentRemarks.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.StudentRemarks.Add(this);
						this._Testidref = value.Testid;
					}
					else
					{
						this._Testidref = default(Nullable<int>);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : b, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Subjectid;
		
		private string _Sname;
		
		private System.Nullable<int> _IsActive;
		
		private System.Nullable<int> _Courseidref;
		
		private EntitySet<AssignSubject> _AssignSubject;
		
		private EntitySet<StudentRemarks> _StudentRemarks;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectidChanging(int value);
    partial void OnSubjectidChanged();
    partial void OnSnameChanging(string value);
    partial void OnSnameChanged();
    partial void OnIsActiveChanging(System.Nullable<int> value);
    partial void OnIsActiveChanged();
    partial void OnCourseidrefChanging(System.Nullable<int> value);
    partial void OnCourseidrefChanged();
    #endregion
		
		public Subject()
		{
			this._AssignSubject = new EntitySet<AssignSubject>(new Action<AssignSubject>(this.attach_AssignSubject), new Action<AssignSubject>(this.detach_AssignSubject));
			this._StudentRemarks = new EntitySet<StudentRemarks>(new Action<StudentRemarks>(this.attach_StudentRemarks), new Action<StudentRemarks>(this.detach_StudentRemarks));
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="subjectid", Storage="_Subjectid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Subjectid
		{
			get
			{
				return this._Subjectid;
			}
			set
			{
				if ((this._Subjectid != value))
				{
					this.OnSubjectidChanging(value);
					this.SendPropertyChanging();
					this._Subjectid = value;
					this.SendPropertyChanged("Subjectid");
					this.OnSubjectidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="sname", Storage="_Sname", DbType="VarChar(50)")]
		public string Sname
		{
			get
			{
				return this._Sname;
			}
			set
			{
				if ((this._Sname != value))
				{
					this.OnSnameChanging(value);
					this.SendPropertyChanging();
					this._Sname = value;
					this.SendPropertyChanged("Sname");
					this.OnSnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="isActive", Storage="_IsActive", DbType="Int")]
		public System.Nullable<int> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="courseidref", Storage="_Courseidref", DbType="Int")]
		public System.Nullable<int> Courseidref
		{
			get
			{
				return this._Courseidref;
			}
			set
			{
				if ((this._Courseidref != value))
				{
					this.OnCourseidrefChanging(value);
					this.SendPropertyChanging();
					this._Courseidref = value;
					this.SendPropertyChanged("Courseidref");
					this.OnCourseidrefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__AssignSub__subje__1B0907CE", Storage="_AssignSubject", ThisKey="Subjectid", OtherKey="Subjectidref", DeleteRule="NO ACTION")]
		public EntitySet<AssignSubject> AssignSubject
		{
			get
			{
				return this._AssignSubject;
			}
			set
			{
				this._AssignSubject.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__StudentRe__subje__2E1BDC42", Storage="_StudentRemarks", ThisKey="Subjectid", OtherKey="Subjectidref", DeleteRule="NO ACTION")]
		public EntitySet<StudentRemarks> StudentRemarks
		{
			get
			{
				return this._StudentRemarks;
			}
			set
			{
				this._StudentRemarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__Subject__coursei__173876EA", Storage="_Course", ThisKey="Courseidref", OtherKey="Courseid", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Subject.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Subject.Add(this);
						this._Courseidref = value.Courseid;
					}
					else
					{
						this._Courseidref = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssignSubject(AssignSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_AssignSubject(AssignSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_StudentRemarks(StudentRemarks entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_StudentRemarks(StudentRemarks entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test")]
	public partial class Test : b, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Testid;
		
		private System.Nullable<int> _Assignidref;
		
		private EntitySet<Question> _Question;
		
		private EntitySet<StudentRemarks> _StudentRemarks;
		
		private EntityRef<AssignSubject> _AssignSubject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestidChanging(int value);
    partial void OnTestidChanged();
    partial void OnAssignidrefChanging(System.Nullable<int> value);
    partial void OnAssignidrefChanged();
    #endregion
		
		public Test()
		{
			this._Question = new EntitySet<Question>(new Action<Question>(this.attach_Question), new Action<Question>(this.detach_Question));
			this._StudentRemarks = new EntitySet<StudentRemarks>(new Action<StudentRemarks>(this.attach_StudentRemarks), new Action<StudentRemarks>(this.detach_StudentRemarks));
			this._AssignSubject = default(EntityRef<AssignSubject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="testid", Storage="_Testid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Testid
		{
			get
			{
				return this._Testid;
			}
			set
			{
				if ((this._Testid != value))
				{
					this.OnTestidChanging(value);
					this.SendPropertyChanging();
					this._Testid = value;
					this.SendPropertyChanged("Testid");
					this.OnTestidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="assignidref", Storage="_Assignidref", DbType="Int")]
		public System.Nullable<int> Assignidref
		{
			get
			{
				return this._Assignidref;
			}
			set
			{
				if ((this._Assignidref != value))
				{
					this.OnAssignidrefChanging(value);
					this.SendPropertyChanging();
					this._Assignidref = value;
					this.SendPropertyChanged("Assignidref");
					this.OnAssignidrefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__Question__testid__20C1E124", Storage="_Question", ThisKey="Testid", OtherKey="Testidref", DeleteRule="NO ACTION")]
		public EntitySet<Question> Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				this._Question.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__StudentRe__testi__2D27B809", Storage="_StudentRemarks", ThisKey="Testid", OtherKey="Testidref", DeleteRule="NO ACTION")]
		public EntitySet<StudentRemarks> StudentRemarks
		{
			get
			{
				return this._StudentRemarks;
			}
			set
			{
				this._StudentRemarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK__Test__assignidre__1DE57479", Storage="_AssignSubject", ThisKey="Assignidref", OtherKey="Assignid", IsForeignKey=true)]
		public AssignSubject AssignSubject
		{
			get
			{
				return this._AssignSubject.Entity;
			}
			set
			{
				AssignSubject previousValue = this._AssignSubject.Entity;
				if (((previousValue != value) 
							|| (this._AssignSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssignSubject.Entity = null;
						previousValue.Test.Remove(this);
					}
					this._AssignSubject.Entity = value;
					if ((value != null))
					{
						value.Test.Add(this);
						this._Assignidref = value.Assignid;
					}
					else
					{
						this._Assignidref = default(Nullable<int>);
					}
					this.SendPropertyChanged("AssignSubject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Question(Question entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_Question(Question entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_StudentRemarks(StudentRemarks entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_StudentRemarks(StudentRemarks entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
	}
}
#pragma warning restore 1591
